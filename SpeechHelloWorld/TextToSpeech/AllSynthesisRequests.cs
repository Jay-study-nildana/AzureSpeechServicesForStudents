// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TextToSpeech3;
//
//    var allSynthesisRequests = AllSynthesisRequests.FromJson(jsonString);

namespace TextToSpeech3
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AllSynthesisRequests
    {
        [JsonProperty("values")]
        public List<Value> Values { get; set; }
    }

    public partial class Value
    {
        [JsonProperty("models")]
        public List<Model> Models { get; set; }

        [JsonProperty("properties")]
        public Properties Properties { get; set; }

        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("lastActionDateTime")]
        public DateTimeOffset LastActionDateTime { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("createdDateTime")]
        public DateTimeOffset CreatedDateTime { get; set; }

        [JsonProperty("locale")]
        public string Locale { get; set; }

        [JsonProperty("displayName")]
        public string DisplayName { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }
    }

    public partial class Model
    {
        [JsonProperty("voiceName")]
        public string VoiceName { get; set; }
    }

    public partial class Properties
    {
        [JsonProperty("outputFormat")]
        public string OutputFormat { get; set; }

        [JsonProperty("concatenateResult")]
        public bool ConcatenateResult { get; set; }

        [JsonProperty("totalDuration")]
        public string TotalDuration { get; set; }

        [JsonProperty("billableCharacterCount")]
        public long BillableCharacterCount { get; set; }
    }

    public partial class AllSynthesisRequests
    {
        public static AllSynthesisRequests FromJson(string json) => JsonConvert.DeserializeObject<AllSynthesisRequests>(json, TextToSpeech3.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AllSynthesisRequests self) => JsonConvert.SerializeObject(self, TextToSpeech3.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
